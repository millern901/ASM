{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 .data\
input_prompt: .asciz "Enter two integers: "\
\
input_specifier: .asciz "%d %d"\
integer_specifier: .asciz "%d"\
flush: .asciz "\\n"\
\
input_one: .space 4\
input_two: .space 4\
gcd_answer: .space 4\
\
.section .text\
.global main\
\
// Main subroutine\
main:\
    // Print the input prompt\
    ldr x0, =input_prompt\
    bl printf\
    ldr x0, =flush\
    bl printf\
\
    // Scan for user input\
    ldr x0, =input_specifier\
    ldr x1, =input_one\
    ldr x2, =input_two\
    bl scanf\
\
    // Retrieve values of m and n from memory\
    ldr x0, =input_one\
    ldrsw x0, [x0, #0]\
    ldr x1, =input_two\
    ldrsw x1, [x1, #0]\
\
    // GCD recurse call\
    bl recurse\
\
    // Print GCD\
    ldr x0, =integer_specifier\
    ldr x1, =gcd_answer\
    ldr x1, [x1, #0]\
    bl printf\
    ldr x0, =flush\
    bl printf\
\
    // Exit call\
    b exit\
\
// Recurse subroutine\
recurse:\
    // Stack frame\
    sub sp, sp, #32\
    str x30, [sp, #0]\
    str x0, [sp, #8]\
    str x1, [sp, #16]\
\
    // Branch to GCD\
    bl gcd\
\
    // Load return pointer and decrement stack\
    ldr x30, [sp, #0]\
    add sp, sp, #32\
    br x30\
\
// GCD subroutine\
gcd:\
    // Load m and n from stack\
    ldr x0, [sp, #8]\
    ldr x1, [sp, #16]\
\
    // Absolute value of m if (m < 0)\
    cmp x0, #0\
    blt absoulte_value_1\
\
    // Absolute value of n if (n < 0)\
    cmp x1, #0\
    blt absoulte_value_2\
\
    // Branch to base case if (m = 0)\
    cmp x0, #0\
    beq base\
\
    // Swap m and n if (n = 0)\
    cmp x1, #0\
    beq swap\
\
    // Swap m and n if (m < n)\
    cmp x0, x1\
    blt swap\
\
    // Caluclate (m % n)\
    mov x2, #0\
    sdiv x2, x0, x1\
    mul x2, x1, x2\
    sub x2, x0, x2\
\
    // Branch to base case if (m % n = 0)\
    cmp x2, #0\
    beq base\
\
    // Branch to recurse\
    mov x0, x1\
    mov x1, x2\
    b recurse\
\
// Base case subroutine\
base:\
    ldr x0, =gcd_answer\
    str x1, [x0, #0]\
    br x30\
\
// Swap subroutine\
swap:\
    mov x2, x0\
    mov x0, x1\
    mov x1, x2\
    b recurse\
\
// Absolute value subroutines\
absoulte_value_1:\
    neg x0, x0\
    b recurse\
absoulte_value_2:\
    neg x1, x1\
    b recurse\
\
// Exit subroutine\
exit:\
    mov x0, #0\
    mov x8, #93\
    svc #0\
}